// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                     String        @id @default(cuid())
  name                   String        @default("")
  email                  String        @unique @default("")
  password               String
  role                   UserRoleType? @default(customer)
  address                Address[]     @relation("User_address")
  from_Address_user      Address[]     @relation("Address_user")
  from_Cart_user         Cart[]        @relation("Cart_user")
  from_Order_user        Order[]       @relation("Order_user")
  from_Order_employee    Order[]       @relation("Order_employee")
  from_Shipment_employee Shipment[]    @relation("Shipment_employee")
}

model Address {
  id                String    @id @default(cuid())
  addressName       String    @default("")
  name              String    @default("")
  streetAddress     String    @default("")
  streetAddress2    String    @default("")
  city              String    @default("")
  postalCode        String    @default("")
  country           String    @default("")
  telNo             String    @default("")
  user              User?     @relation("Address_user", fields: [userId], references: [id])
  userId            String?   @map("user")
  createdAt         DateTime? @default(now())
  lastModification  DateTime? @default(now()) @updatedAt
  from_User_address User[]    @relation("User_address")

  @@index([userId])
}

model Cart {
  id           String    @id @default(cuid())
  user         User?     @relation("Cart_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  products     Product[] @relation("Cart_products")
  lastModified DateTime? @default(now()) @updatedAt
  sum          Decimal   @default("0") @postgresql.Decimal(18, 4)

  @@index([userId])
}

model Order {
  id                  String           @id @default(cuid())
  user                User?            @relation("Order_user", fields: [userId], references: [id])
  userId              String?          @map("user")
  products            Json?
  payment             Payment?         @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId           String?          @map("payment")
  shipment            Shipment?        @relation("Order_shipment", fields: [shipmentId], references: [id])
  shipmentId          String?          @map("shipment")
  employee            User?            @relation("Order_employee", fields: [employeeId], references: [id])
  employeeId          String?          @map("employee")
  status              OrderStatusType?
  createdAt           DateTime?        @default(now())
  lastModification    DateTime?        @default(now()) @updatedAt
  from_Payment_order  Payment[]        @relation("Payment_order")
  from_Shipment_order Shipment[]       @relation("Shipment_order")

  @@index([userId])
  @@index([paymentId])
  @@index([shipmentId])
  @@index([employeeId])
}

model Product {
  id                     String         @id @default(cuid())
  name                   String         @default("")
  description            Json           @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  seoDesc                String         @default("")
  categories             Category[]     @relation("Product_categories")
  images                 ProductImage[] @relation("Product_images")
  price                  Decimal?       @postgresql.Decimal(18, 4)
  stars                  Int?
  stock                  Stock?         @relation("Product_stock", fields: [stockId], references: [id])
  stockId                String?        @map("stock")
  createdAt              DateTime?      @default(now())
  lastModification       DateTime?      @default(now()) @updatedAt
  from_Cart_products     Cart[]         @relation("Cart_products")
  from_Category_products Category[]     @relation("Category_products")

  @@index([stockId])
}

model Stock {
  id                   String    @id @default(cuid())
  stock                Int?
  nextDelivery         DateTime?
  amountInNextDelivery Int?
  createdAt            DateTime? @default(now())
  lastModification     DateTime? @default(now()) @updatedAt
  from_Product_stock   Product[] @relation("Product_stock")
}

model Category {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  parent                  Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId                String?    @map("parent")
  products                Product[]  @relation("Category_products")
  createdAt               DateTime?  @default(now())
  lastModification        DateTime?  @default(now()) @updatedAt
  from_Product_categories Product[]  @relation("Product_categories")
  from_Category_parent    Category[] @relation("Category_parent")

  @@index([parentId])
}

model ProductImage {
  id                  String    @id @default(cuid())
  alt                 String    @default("")
  image               Json?
  createdAt           DateTime? @default(now())
  lastModification    DateTime? @default(now()) @updatedAt
  from_Product_images Product[] @relation("Product_images")
}

model Payment {
  id                 String             @id @default(cuid())
  order              Order?             @relation("Payment_order", fields: [orderId], references: [id])
  orderId            String?            @map("order")
  sum                Decimal?           @postgresql.Decimal(18, 4)
  currency           String             @default("")
  externalId         String             @default("")
  status             PaymentStatusType?
  createdAt          DateTime?          @default(now())
  lastModification   DateTime?          @default(now()) @updatedAt
  from_Order_payment Order[]            @relation("Order_payment")

  @@index([orderId])
}

model Shipment {
  id                  String              @id @default(cuid())
  status              ShipmentStatusType?
  externalId          String              @default("")
  order               Order?              @relation("Shipment_order", fields: [orderId], references: [id])
  orderId             String?             @map("order")
  employee            User?               @relation("Shipment_employee", fields: [employeeId], references: [id])
  employeeId          String?             @map("employee")
  createdAt           DateTime?           @default(now())
  lastModification    DateTime?           @default(now()) @updatedAt
  from_Order_shipment Order[]             @relation("Order_shipment")

  @@index([orderId])
  @@index([employeeId])
}

enum UserRoleType {
  admin
  employee
  customer
}

enum OrderStatusType {
  Created
}

enum PaymentStatusType {
  Created
}

enum ShipmentStatusType {
  Created
}